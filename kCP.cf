-- Ansi C, following Kernighan & Ritchie (Second Edition).
-- (c) Ulf Persson 2003
-- part of BSc thesis at Chalmers University of Technology
--
-- NOTICE: the C program may need to be preprocessed by cpp. Also types defined
-- by typedefs have to be eliminated (these are known problems with the 
-- BNF grammar of Ansi C).

entrypoints Program ;

Progr.  Program ::= [External_declaration] ;

(:[]).    [External_declaration] ::= External_declaration;
(:).      [External_declaration] ::= External_declaration [External_declaration];


Afunc.  External_declaration ::= Function_def ;
Global. External_declaration ::= Dec ;

OldFunc.     Function_def ::= [Declaration_specifier] Declarator [Dec] Compound_stm ;
NewFunc.     Function_def ::= [Declaration_specifier] Declarator Compound_stm ;
OldFuncInt.  Function_def ::= Declarator [Dec] Compound_stm ;
NewFuncInt.  Function_def ::= Declarator Compound_stm ;


NoDeclarator.  Dec ::= [Declaration_specifier] ";";
Declarators.   Dec ::= [Declaration_specifier] [Init_declarator] ";" ;

(:[]).    [Dec] ::= Dec;
(:).      [Dec] ::= Dec [Dec];  

(:[]).  [Declaration_specifier] ::= Declaration_specifier ;
(:).    [Declaration_specifier] ::= Declaration_specifier [Declaration_specifier] ;

Type.     Declaration_specifier ::= Type_specifier ;

(:[]).   [Init_declarator] ::= Init_declarator ;
(:).     [Init_declarator] ::= Init_declarator "," [Init_declarator] ;

OnlyDecl.  Init_declarator ::= Declarator ;
InitDecl.  Init_declarator ::= Declarator "=" Initializer;


Tvoid.        Type_specifier ::= "void";
Tint.         Type_specifier ::= "int";
Tbool.        Type_specifier ::= "bool";
Tstruct.      Type_specifier ::= Struct_spec;

Tag.      Struct_spec ::= Struct Ident "{" [Struct_dec] "}" ;

Structword.   Struct ::= "struct";

(:[]).   [Struct_dec] ::= Struct_dec ;
(:).     [Struct_dec] ::= Struct_dec [Struct_dec] ;

Structen. Struct_dec ::= [Spec_qual] [Struct_declarator] ";" ;

(:[]).  [Spec_qual] ::= Spec_qual ;
(:).    [Spec_qual] ::= Spec_qual [Spec_qual];

TypeSpec.  Spec_qual ::= Type_specifier ;

(:[]).    [Struct_declarator] ::= Struct_declarator;
(:).      [Struct_declarator] ::= Struct_declarator "," [Struct_declarator];

Decl.      Struct_declarator ::= Declarator;

Name.        Declarator ::= Ident ;
-- ParenDecl.   Declarator ::= "(" Declarator ")" ;
InnitArray.  Declarator ::= Declarator "[" Constant_expression "]" ;
Incomplete.  Declarator ::= Declarator "[" "]" ;
NewFuncDec.  Declarator ::= Declarator "(" Parameter_type ")" ;
OldFuncDef.  Declarator ::= Declarator "(" [Ident] ")" ;
OldFuncDec.  Declarator ::= Declarator "(" ")" ;

AllSpec.  Parameter_type ::= Parameter_declarations ;
More.     Parameter_type ::= Parameter_declarations "," "..." ;

ParamDec.     Parameter_declarations ::= Parameter_declaration ;                   
MoreParamDec. Parameter_declarations ::= Parameter_declarations "," Parameter_declaration ;

OnlyType.      Parameter_declaration ::= [Declaration_specifier] ;
TypeAndParam.  Parameter_declaration ::= [Declaration_specifier] Declarator ;

(:[]).   [Ident] ::= Ident ;
(:).     [Ident] ::= Ident "," [Ident] ;

InitExpr.    Initializer ::= Exp2 ;
InitList1.   Initializer ::= "{" Initializers "}" ;
InitList2.   Initializer ::= "{" Initializers "," "}" ;
InitList3.   Initializer ::= "[" Exp2 ".." Exp2 "]" ;
InitList4.   Initializer ::= "[" Initializers "]" ;
InitList5.   Initializer ::= "[" Initializers "," "]" ;

AnInit.   Initializers ::= Initializer ;
MoreInit. Initializers ::= Initializers "," Initializer ;

-- PlainType.    Type_name ::= [Spec_qual] ;

CompS.    Stm ::= Compound_stm ;
ExprS.    Stm ::= Expression_stm ;
SelS.     Stm ::= Selection_stm ;
IterS.    Stm ::= Iter_stm ;
JumpS.    Stm ::= Jump_stm ;

ScompOne.   Compound_stm ::= "{" "}" ;
ScompTwo.   Compound_stm ::= "{" [Stm] "}" ;
ScompThree. Compound_stm ::= "{" [Dec] "}" ;
ScompFour.  Compound_stm ::= "{" [Dec] [Stm] "}" ;

SexprOne.   Expression_stm ::= ";" ;
SexprTwo.   Expression_stm ::= Exp ";" ;

SselOne.    Selection_stm ::= "if" "(" Exp ")" Compound_stm ;
SselTwo.    Selection_stm ::= "if" "(" Exp ")" Compound_stm "else" Compound_stm ;

SiterOne.   Iter_stm ::= "while" "(" Exp ")" Compound_stm;
SiterTwo.   Iter_stm ::= "do" Compound_stm "while" "(" Exp ")" ";" ;
SiterThree. Iter_stm ::= "for" "(" Expression_stm Expression_stm ")" Compound_stm ;
SiterFour.  Iter_stm ::= "for" "(" Expression_stm Expression_stm Exp ")" Compound_stm;
SiterFive.  Iter_stm ::= "for" Ident "in" Expression_stm Compound_stm ;

SjumpTwo.   Jump_stm ::= "continue" ";" ;
SjumpThree. Jump_stm ::= "break" ";" ;
SjumpFour.  Jump_stm ::= "return" ";" ;
SjumpFive.  Jump_stm ::= "return" Exp ";" ;


(:[]).   [Stm] ::= Stm ;
(:).     [Stm] ::= Stm [Stm];


Ecomma.      Exp   ::= Exp "," Exp2;
Eassign.     Exp2  ::= Exp15 Assignment_op Exp2;
-- Econdition.  Exp3  ::= Exp4 "?" Exp ":" Exp3;
Elor.        Exp4  ::= Exp4 "||" Exp5;
Eland.       Exp5  ::= Exp5 "&&" Exp6;
Eeq.         Exp9  ::= Exp9 "==" Exp10;
Eneq.        Exp9  ::= Exp9 "!=" Exp10;
Elthen.      Exp10 ::= Exp10 "<" Exp11;
Egrthen.     Exp10 ::= Exp10 ">" Exp11;
Ele.         Exp10 ::= Exp10 "<=" Exp11;
Ege.         Exp10 ::= Exp10 ">=" Exp11;
Eplus.       Exp12 ::= Exp12 "+" Exp13;
Eminus.      Exp12 ::= Exp12 "-" Exp13;
Etimes.      Exp13 ::= Exp13 "*" Exp14;
Ediv.        Exp13 ::= Exp13 "/" Exp14;
Emod.        Exp13 ::= Exp13 "%" Exp14;
Epreinc.     Exp15 ::= "++" Exp15;
Epredec.     Exp15 ::= "--" Exp15;
Epreop.      Exp15 ::= Unary_operator Exp14;
Earray.      Exp16 ::= Exp16 "[" Exp "]" ;
Efunk.       Exp16 ::= Exp16 "(" ")";
Efunkpar.    Exp16 ::= Exp16 "(" [Exp2] ")";
-- Eselect.     Exp16 ::= Exp16 "." Ident;
Epostinc.    Exp16 ::= Exp16 "++";
Epostdec.    Exp16 ::= Exp16 "--";
Evar.        Exp17 ::= Ident;
Econst.      Exp17 ::= Constant;
-- Estring.     Exp17 ::= String;

Eint.          Constant ::= Integer;
Ebool.         Constant ::= Boolean;
Evoid.         Constant ::= "void";

Vtrue.         Boolean ::= "true";
Vfalse.        Boolean ::= "false";

Especial. Constant_expression ::= Exp3;

_. Exp   ::= Exp2 ;
_. Exp2  ::= Exp3 ;
_. Exp3  ::= Exp4 ;
_. Exp4  ::= Exp5 ;
_. Exp5  ::= Exp6 ;
_. Exp6  ::= Exp7 ;
_. Exp7  ::= Exp8 ;
_. Exp8  ::= Exp9 ;
_. Exp9  ::= Exp10 ;
_. Exp10 ::= Exp11 ;
_. Exp11 ::= Exp12 ;
_. Exp12 ::= Exp13 ;
_. Exp13 ::= Exp14 ;
_. Exp14 ::= Exp15 ;
_. Exp15 ::= Exp16 ;
_. Exp16 ::= Exp17 ;
_. Exp17 ::= "(" Exp ")" ;


Plus.        Unary_operator ::= "+" ;
Negative.    Unary_operator ::= "-" ;
Logicalneg.  Unary_operator ::= "!" ;

(:[]).   [Exp2] ::= Exp2 ;
(:).     [Exp2] ::= Exp2 "," [Exp2];

Assign.       Assignment_op ::= "=" ;
AssignMul.    Assignment_op ::= "*=" ;
AssignDiv.    Assignment_op ::= "/=" ;
AssignMod.    Assignment_op ::= "%=" ;
AssignAdd.    Assignment_op ::= "+=" ;
AssignSub.    Assignment_op ::= "-=" ;
AssignAnd.    Assignment_op ::= "&=" ;
AssignOr.     Assignment_op ::= "|=" ;

comment "/*" "*/" ;
comment "//";
comment "#";
