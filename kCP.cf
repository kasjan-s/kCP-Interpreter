-- Ansi C, following Kernighan & Ritchie (Second Edition).
-- (c) Ulf Persson 2003
-- part of BSc thesis at Chalmers University of Technology
--
-- NOTICE: the C program may need to be preprocessed by cpp. Also types defined
-- by typedefs have to be eliminated (these are known problems with the 
-- BNF grammar of Ansi C).

entrypoints Program ;

Progr.  Program ::= [Declaration] ;

(:[]).    [Declaration] ::= Declaration;
(:).      [Declaration] ::= Declaration [Declaration];

FuncDecl.           Declaration ::= Type_specifier Declarator Compound_stm ;
VarDecl.            Declaration ::= Type_specifier [Init_declarator] ";" ;
ExpDecl.            Declaration ::= Exp ";" ;


(:[]).   [Init_declarator] ::= Init_declarator ;
(:).     [Init_declarator] ::= Init_declarator "," [Init_declarator] ;

OnlyDecl.  Init_declarator ::= Ident ;
InitDecl.  Init_declarator ::= Ident "=" Exp;

Tint.         Type_specifier ::= "int";
Tbool.        Type_specifier ::= "bool";
Tvoid.        Type_specifier ::= "void";

FuncIdent.  Declarator ::= Ident "(" [Parameter_declaration] ")" ;
separator Parameter_declaration "," ;

TypeAndParam.  Parameter_declaration ::= Type_specifier Ident ;

(:[]).   [Ident] ::= Ident ;
(:).     [Ident] ::= Ident "," [Ident] ;

CompStm.         Stm ::= Compound_stm ;
ExprStm.         Stm ::= Expression_stm ;
SelecStm.        Stm ::= Selection_stm ;
IterStm.         Stm ::= Iter_stm ;
JumpStm.         Stm ::= Jump_stm ;
PrintStm.        Stm ::= Print_stm ;
DeclStm.         Stm ::= Declaration ;

SEmptyComp.    Compound_stm ::= "{" "}" ;
SStmtComp.     Compound_stm ::= "{" [Stm] "}" ;
SDeclComp.     Compound_stm ::= "{" [Declaration] "}" ;
SMixComp.      Compound_stm ::= "{" [Declaration] [Stm] "}" ;

SEmptyExpr.   	Expression_stm ::= ";" ;
SExpr.   	Expression_stm ::= Exp ";" ;

SIf.        Selection_stm ::= "if" "(" Exp ")" Compound_stm ;
SIfElse.    Selection_stm ::= "if" "(" Exp ")" Compound_stm "else" Compound_stm ;

SWhile.     Iter_stm ::= "while" "(" Exp ")" Compound_stm;
SDoWhile.   Iter_stm ::= "do" Compound_stm "while" "(" Exp ")" ;
SForEmpty.  Iter_stm ::= "for" "(" Expression_stm Expression_stm ")" Compound_stm ;
SFor.       Iter_stm ::= "for" "(" Expression_stm Expression_stm Exp ")" Compound_stm;

SjumpCont.    Jump_stm ::= "continue" ";" ;
SjumpBreak.   Jump_stm ::= "break" ";" ;
SjumpReturn.  Jump_stm ::= "return" ";" ;
SjumpRetExp.  Jump_stm ::= "return" Exp ";" ;

Sprint.     Print_stm ::= "print(" [Exp] ")" ";" ;

(:[]).   [Stm] ::= Stm ;
(:).     [Stm] ::= Stm [Stm];

Eassign.     Exp  ::= Exp8 Assignment_op Exp;
Elor.        Exp2  ::= Exp2 "||" Exp4;
Eland.       Exp3  ::= Exp3 "&&" Exp4;
Eeq.         Exp4  ::= Exp4 "==" Exp5;
Eneq.        Exp4  ::= Exp4 "!=" Exp5;
Elthen.      Exp5 ::= Exp5 "<" Exp6;
Egrthen.     Exp5 ::= Exp5 ">" Exp6;
Ele.         Exp5 ::= Exp5 "<=" Exp6;
Ege.         Exp5 ::= Exp5 ">=" Exp6;
Eplus.       Exp6 ::= Exp6 "+" Exp7;
Eminus.      Exp6 ::= Exp6 "-" Exp7;
Etimes.      Exp7 ::= Exp7 "*" Exp8;
Ediv.        Exp7 ::= Exp7 "/" Exp8;
Emod.        Exp7 ::= Exp7 "%" Exp8;
Epreinc.     Exp8 ::= "++" Exp8;
Epredec.     Exp8 ::= "--" Exp8;
Epreop.      Exp8 ::= Unary_operator Exp8;
Efunk.       Exp9 ::= Ident "(" ")";
Efunkpar.    Exp9 ::= Ident "(" [Exp] ")";
Epostinc.    Exp9 ::= Exp9 "++";
Epostdec.    Exp9 ::= Exp9 "--";
Evar.        Exp10 ::= Ident;
Econst.      Exp10 ::= Constant;

Eint.          Constant ::= Integer;
Ebool.         Constant ::= Boolean;

Vtrue.         Boolean ::= "true";
Vfalse.        Boolean ::= "false";

Especial. Constant_expression ::= Exp3;

_. Exp   ::= Exp2 ;
_. Exp2  ::= Exp3 ;
_. Exp3  ::= Exp4 ;
_. Exp4  ::= Exp5 ;
_. Exp5  ::= Exp6 ;
_. Exp6  ::= Exp7 ;
_. Exp7  ::= Exp8 ;
_. Exp8  ::= Exp9 ;
_. Exp9  ::= Exp10 ;
_. Exp10 ::= Exp11 ;
_. Exp11 ::= Exp12 ;
_. Exp12 ::= Exp13 ;
_. Exp13 ::= Exp14 ;
_. Exp14 ::= Exp15 ;
_. Exp15 ::= Exp16 ;
_. Exp16 ::= Exp17 ;
_. Exp17 ::= "(" Exp ")" ;


Plus.        Unary_operator ::= "+" ;
Negative.    Unary_operator ::= "-" ;
Logicalneg.  Unary_operator ::= "!" ;

(:[]).   [Exp] ::= Exp ;
(:).     [Exp] ::= Exp "," [Exp];

Assign.       Assignment_op ::= "=" ;
AssignMul.    Assignment_op ::= "*=" ;
AssignDiv.    Assignment_op ::= "/=" ;
AssignMod.    Assignment_op ::= "%=" ;
AssignAdd.    Assignment_op ::= "+=" ;
AssignSub.    Assignment_op ::= "-=" ;

comment "/*" "*/" ;
comment "//";
comment "#";
