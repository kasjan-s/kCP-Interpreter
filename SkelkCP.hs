module SkelkCP where

-- Haskell module generated by the BNF converter

import AbskCP
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transProgram :: Program -> Result
transProgram x = case x of
  Progr declarations  -> failure x


transDeclaration :: Declaration -> Result
transDeclaration x = case x of
  FuncDecl type_specifier declarator compound_stm  -> failure x
  VarDecl type_specifier init_declarators  -> failure x
  ExpDecl exp  -> failure x


transInit_declarator :: Init_declarator -> Result
transInit_declarator x = case x of
  OnlyDecl id  -> failure x
  InitDecl id exp  -> failure x


transType_specifier :: Type_specifier -> Result
transType_specifier x = case x of
  Tint  -> failure x
  Tbool  -> failure x
  Tvoid  -> failure x


transDeclarator :: Declarator -> Result
transDeclarator x = case x of
  FuncIdent id parameter_declarations  -> failure x


transParameter_declaration :: Parameter_declaration -> Result
transParameter_declaration x = case x of
  TypeAndParam type_specifier id  -> failure x


transStm :: Stm -> Result
transStm x = case x of
  CompStm compound_stm  -> failure x
  ExprStm expression_stm  -> failure x
  SelecStm selection_stm  -> failure x
  IterStm iter_stm  -> failure x
  JumpStm jump_stm  -> failure x
  PrintStm print_stm  -> failure x


transCompound_stm :: Compound_stm -> Result
transCompound_stm x = case x of
  SEmptyComp  -> failure x
  SStmtComp stms  -> failure x
  SDeclComp declarations  -> failure x
  SMixComp declarations stms  -> failure x


transExpression_stm :: Expression_stm -> Result
transExpression_stm x = case x of
  SEmptyExpr  -> failure x
  SExpr exp  -> failure x


transSelection_stm :: Selection_stm -> Result
transSelection_stm x = case x of
  SIf exp compound_stm  -> failure x
  SIfElse exp compound_stm1 compound_stm2  -> failure x


transIter_stm :: Iter_stm -> Result
transIter_stm x = case x of
  SWhile exp compound_stm  -> failure x
  SDoWhile compound_stm exp  -> failure x
  SForEmpty expression_stm1 expression_stm2 compound_stm3  -> failure x
  SFor expression_stm1 expression_stm2 exp3 compound_stm4  -> failure x


transJump_stm :: Jump_stm -> Result
transJump_stm x = case x of
  SjumpCont  -> failure x
  SjumpBreak  -> failure x
  SjumpReturn  -> failure x
  SjumpRetExp exp  -> failure x


transPrint_stm :: Print_stm -> Result
transPrint_stm x = case x of
  Sprint exps  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  Eassign exp1 assignment_op2 exp3  -> failure x
  Elor exp1 exp2  -> failure x
  Eland exp1 exp2  -> failure x
  Eeq exp1 exp2  -> failure x
  Eneq exp1 exp2  -> failure x
  Elthen exp1 exp2  -> failure x
  Egrthen exp1 exp2  -> failure x
  Ele exp1 exp2  -> failure x
  Ege exp1 exp2  -> failure x
  Eplus exp1 exp2  -> failure x
  Eminus exp1 exp2  -> failure x
  Etimes exp1 exp2  -> failure x
  Ediv exp1 exp2  -> failure x
  Emod exp1 exp2  -> failure x
  Epreinc exp  -> failure x
  Epredec exp  -> failure x
  Epreop unary_operator exp  -> failure x
  Efunk id  -> failure x
  Efunkpar id exps  -> failure x
  Epostinc exp  -> failure x
  Epostdec exp  -> failure x
  Evar id  -> failure x
  Econst constant  -> failure x


transConstant :: Constant -> Result
transConstant x = case x of
  Eint n  -> failure x
  Ebool boolean  -> failure x


transBoolean :: Boolean -> Result
transBoolean x = case x of
  Vtrue  -> failure x
  Vfalse  -> failure x


transConstant_expression :: Constant_expression -> Result
transConstant_expression x = case x of
  Especial exp  -> failure x


transUnary_operator :: Unary_operator -> Result
transUnary_operator x = case x of
  Plus  -> failure x
  Negative  -> failure x
  Logicalneg  -> failure x


transAssignment_op :: Assignment_op -> Result
transAssignment_op x = case x of
  Assign  -> failure x
  AssignMul  -> failure x
  AssignDiv  -> failure x
  AssignMod  -> failure x
  AssignAdd  -> failure x
  AssignSub  -> failure x



