module SkelkCP where

-- Haskell module generated by the BNF converter

import AbskCP
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transProgram :: Program -> Result
transProgram x = case x of
  Progr external_declarations  -> failure x


transExternal_declaration :: External_declaration -> Result
transExternal_declaration x = case x of
  DefFunc function_def  -> failure x
  Global dec  -> failure x


transFunction_def :: Function_def -> Result
transFunction_def x = case x of
  Func declaration_specifier declarator compound_stm  -> failure x


transDec :: Dec -> Result
transDec x = case x of
  Declarators declaration_specifier init_declarators  -> failure x


transDeclaration_specifier :: Declaration_specifier -> Result
transDeclaration_specifier x = case x of
  Type type_specifier  -> failure x


transInit_declarator :: Init_declarator -> Result
transInit_declarator x = case x of
  OnlyDecl declarator  -> failure x
  InitDecl declarator initializer  -> failure x


transType_specifier :: Type_specifier -> Result
transType_specifier x = case x of
  Tvoid  -> failure x
  Tint  -> failure x
  Tbool  -> failure x
  Tstruct struct_spec  -> failure x


transStruct_spec :: Struct_spec -> Result
transStruct_spec x = case x of
  Tag struct id struct_decs  -> failure x


transStruct :: Struct -> Result
transStruct x = case x of
  Structword  -> failure x


transStruct_dec :: Struct_dec -> Result
transStruct_dec x = case x of
  Structen spec_quals struct_declarators  -> failure x


transSpec_qual :: Spec_qual -> Result
transSpec_qual x = case x of
  TypeSpec type_specifier  -> failure x


transStruct_declarator :: Struct_declarator -> Result
transStruct_declarator x = case x of
  Decl declarator  -> failure x


transDeclarator :: Declarator -> Result
transDeclarator x = case x of
  Name id  -> failure x
  InnitArray declarator constant_expression  -> failure x
  Incomplete declarator  -> failure x
  NewFuncDec declarator parameter_type  -> failure x
  OldFuncDef declarator ids  -> failure x
  OldFuncDec declarator  -> failure x


transParameter_type :: Parameter_type -> Result
transParameter_type x = case x of
  AllSpec parameter_declarations  -> failure x
  More parameter_declarations  -> failure x


transParameter_declarations :: Parameter_declarations -> Result
transParameter_declarations x = case x of
  ParamDec parameter_declaration  -> failure x
  MoreParamDec parameter_declarations parameter_declaration  -> failure x


transParameter_declaration :: Parameter_declaration -> Result
transParameter_declaration x = case x of
  OnlyType declaration_specifiers  -> failure x
  TypeAndParam declaration_specifiers declarator  -> failure x


transInitializer :: Initializer -> Result
transInitializer x = case x of
  InitExpr exp  -> failure x
  InitList1 initializers  -> failure x
  InitList2 initializers  -> failure x
  InitList3 exp1 exp2  -> failure x
  InitList4 initializers  -> failure x
  InitList5 initializers  -> failure x


transInitializers :: Initializers -> Result
transInitializers x = case x of
  AnInit initializer  -> failure x
  MoreInit initializers initializer  -> failure x


transStm :: Stm -> Result
transStm x = case x of
  CompStm compound_stm  -> failure x
  ExprStm expression_stm  -> failure x
  SelecStm selection_stm  -> failure x
  IterStm iter_stm  -> failure x
  JumpStm jump_stm  -> failure x


transCompound_stm :: Compound_stm -> Result
transCompound_stm x = case x of
  ScompOne  -> failure x
  ScompTwo stms  -> failure x
  ScompThree decs  -> failure x
  ScompFour decs stms  -> failure x


transExpression_stm :: Expression_stm -> Result
transExpression_stm x = case x of
  SexprOne  -> failure x
  SexprTwo exp  -> failure x


transSelection_stm :: Selection_stm -> Result
transSelection_stm x = case x of
  SselOne exp compound_stm  -> failure x
  SselTwo exp compound_stm1 compound_stm2  -> failure x


transIter_stm :: Iter_stm -> Result
transIter_stm x = case x of
  SiterOne exp compound_stm  -> failure x
  SiterTwo compound_stm exp  -> failure x
  SiterThree expression_stm1 expression_stm2 compound_stm3  -> failure x
  SiterFour expression_stm1 expression_stm2 exp3 compound_stm4  -> failure x
  SiterFive id expression_stm compound_stm  -> failure x


transJump_stm :: Jump_stm -> Result
transJump_stm x = case x of
  SjumpTwo  -> failure x
  SjumpThree  -> failure x
  SjumpFour  -> failure x
  SjumpFive exp  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  Ecomma exp1 exp2  -> failure x
  Eassign exp1 assignment_op2 exp3  -> failure x
  Elor exp1 exp2  -> failure x
  Eland exp1 exp2  -> failure x
  Eeq exp1 exp2  -> failure x
  Eneq exp1 exp2  -> failure x
  Elthen exp1 exp2  -> failure x
  Egrthen exp1 exp2  -> failure x
  Ele exp1 exp2  -> failure x
  Ege exp1 exp2  -> failure x
  Eplus exp1 exp2  -> failure x
  Eminus exp1 exp2  -> failure x
  Etimes exp1 exp2  -> failure x
  Ediv exp1 exp2  -> failure x
  Emod exp1 exp2  -> failure x
  Epreinc exp  -> failure x
  Epredec exp  -> failure x
  Epreop unary_operator exp  -> failure x
  Earray exp1 exp2  -> failure x
  Efunk exp  -> failure x
  Efunkpar exp exps  -> failure x
  Eselect exp id  -> failure x
  Epostinc exp  -> failure x
  Epostdec exp  -> failure x
  Evar id  -> failure x
  Econst constant  -> failure x


transConstant :: Constant -> Result
transConstant x = case x of
  Eint n  -> failure x
  Ebool boolean  -> failure x
  Evoid  -> failure x


transBoolean :: Boolean -> Result
transBoolean x = case x of
  Vtrue  -> failure x
  Vfalse  -> failure x


transConstant_expression :: Constant_expression -> Result
transConstant_expression x = case x of
  Especial exp  -> failure x


transUnary_operator :: Unary_operator -> Result
transUnary_operator x = case x of
  Plus  -> failure x
  Negative  -> failure x
  Logicalneg  -> failure x


transAssignment_op :: Assignment_op -> Result
transAssignment_op x = case x of
  Assign  -> failure x
  AssignMul  -> failure x
  AssignDiv  -> failure x
  AssignMod  -> failure x
  AssignAdd  -> failure x
  AssignSub  -> failure x
  AssignAnd  -> failure x
  AssignOr  -> failure x



